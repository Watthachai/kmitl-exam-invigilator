import { NextResponse } from 'next/server';
import prisma from '@/app/lib/prisma';

export async function POST() {
  try {
    console.log('üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤...');

    // 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    console.log('üìä ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≠‡∏ö...');
    const scheduleStats = await prisma.schedule.groupBy({
      by: ['subjectGroupId'],
      _count: true,
      where: {
        OR: [{ examType: 'MIDTERM' }, { examType: 'FINAL' }]
      }
    });
    console.log(`‚úÖ ‡∏û‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${scheduleStats.length} ‡∏Å‡∏•‡∏∏‡πà‡∏°`);

    // 2. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏†‡∏≤‡∏Ñ‡∏ß‡∏¥‡∏ä‡∏≤
    console.log('üìã ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ï‡∏≤‡∏°‡∏†‡∏≤‡∏Ñ‡∏ß‡∏¥‡∏ä‡∏≤...');
    const departmentStats = await prisma.invigilator.groupBy({
      by: ['departmentId'],
      _count: true,
      where: { type: '‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå' }
    });
    console.log(`‚úÖ ‡∏û‡∏ö‡∏†‡∏≤‡∏Ñ‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${departmentStats.length} ‡∏†‡∏≤‡∏Ñ‡∏ß‡∏¥‡∏ä‡∏≤`);

    // 3. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì quota ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏†‡∏≤‡∏Ñ‡∏ß‡∏¥‡∏ä‡∏≤
    for (const deptStat of departmentStats) {
      const departmentId = deptStat.departmentId;
      const invigilatorsInDept = deptStat._count;

      console.log(`\nüìå ‡∏†‡∏≤‡∏Ñ‡∏ß‡∏¥‡∏ä‡∏≤ ID: ${departmentId}`);
      console.log(`üë®‚Äçüè´ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡πÉ‡∏ô‡∏†‡∏≤‡∏Ñ‡∏ß‡∏¥‡∏ä‡∏≤: ${invigilatorsInDept}`);

      if (invigilatorsInDept === 0) {
        console.log('‚ö†Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°‡∏†‡∏≤‡∏Ñ‡∏ß‡∏¥‡∏ä‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå');
        continue;
      }

      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏π‡πÅ‡∏•‡πÇ‡∏î‡∏¢‡∏†‡∏≤‡∏Ñ‡∏ß‡∏¥‡∏ä‡∏≤‡∏ô‡∏µ‡πâ
      const schedulesForDept = await Promise.all(
        scheduleStats.map(async s => {
          const subjectGroup = await prisma.subjectGroup.findUnique({
            where: { id: s.subjectGroupId },
            include: { subject: true }
          });
          return subjectGroup?.subject.departmentId === departmentId ? s : null;
        })
      ).then(results => results.filter(Boolean));

      const totalSchedulesForDept = schedulesForDept.reduce((sum, s) => sum + (s as NonNullable<typeof s>)._count, 0);

      console.log(`üìö ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏Ñ‡∏ß‡∏¥‡∏ä‡∏≤: ${totalSchedulesForDept}`);

      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå
      const baseQuota = Math.floor(totalSchedulesForDept / invigilatorsInDept);
      let remainingQuota = totalSchedulesForDept % invigilatorsInDept;

      console.log(`‚úÇÔ∏è ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤: ‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô‡∏à‡∏∞‡πÑ‡∏î‡πâ ${baseQuota}`);
      console.log(`üßÆ ‡πÄ‡∏®‡∏©‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£: ${remainingQuota}`);

      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï quota ‡πÉ‡∏´‡πâ‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏†‡∏≤‡∏Ñ‡∏ß‡∏¥‡∏ä‡∏≤
      const updatedInvigilators = await prisma.invigilator.updateMany({
        where: { departmentId: departmentId, type: '‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå' },
        data: { quota: baseQuota, assignedQuota: 0 }
      });

      console.log(`‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡πÉ‡∏´‡πâ‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå ${updatedInvigilators.count} ‡∏Ñ‡∏ô`);

      // 4. ‡πÅ‡∏à‡∏Å quota ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏´‡πâ‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
      if (remainingQuota > 0) {
        console.log('üéØ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏à‡∏Å‡∏à‡πà‡∏≤‡∏¢‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏´‡πâ‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ...');

        const generalStaff = await prisma.invigilator.findMany({
          where: { departmentId: departmentId, type: '‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ' },
          take: remainingQuota
        });

        for (const staff of generalStaff) {
          await prisma.invigilator.update({
            where: { id: staff.id },
            data: { quota: (staff.quota || 0) + 1 }
          });
          console.log(`‚úÖ ‡πÉ‡∏´‡πâ‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏° 1 ‡∏Å‡∏±‡∏ö‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£ ID: ${staff.id}`);
          remainingQuota--;
          if (remainingQuota === 0) break;
        }

        if (remainingQuota > 0) {
          console.log(`‚ö†Ô∏è ‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏à‡∏Å: ${remainingQuota}`);
        }
      }

      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï department quota
      await prisma.department.update({
        where: { id: departmentId },
        data: { quota: totalSchedulesForDept }
      });

      console.log(`üèõÔ∏è ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏Ñ‡∏ß‡∏¥‡∏ä‡∏≤‡πÄ‡∏õ‡πá‡∏ô ${totalSchedulesForDept}`);
    }

    console.log('üéâ ‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå');
    return NextResponse.json({ message: 'Updated quotas successfully' });
  } catch (error) {
    console.error('‚ùå Error updating quotas:', error);
    return NextResponse.json({ error: 'Failed to update quotas' }, { status: 500 });
  }
}
