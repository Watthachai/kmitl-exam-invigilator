// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid()) @map("AccountID")
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String? @map("oauth_token_secret") @db.Text
  oauth_token        String? @map("oauth_token") @db.Text

  user User @relation(fields:[userId], references:[id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("SessionID")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields:[userId], references:[id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid()) @map("UserID")
  name          String?
  email         String?@unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          String    @default("user")
  professor     Professor? // Link to Professor if user is a professor
  invigilator   Invigilator? // Link to Invigilator if user is an invigilator
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model Subject {
  id            String         @id @default(cuid()) @map("SubjectID")
  code          String         @unique // Subject code
  name          String
  subjectGroups SubjectGroup[]
  department    Department     @relation(fields: [departmentId], references: [id])
  departmentId  String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model SubjectGroup {
  id                  String                @id @default(cuid())
  groupNumber         String
  year               Int
  studentCount       Int
  subject            Subject               @relation(fields: [subjectId], references: [id])
  subjectId          String
  professor          Professor             @relation(fields: [professorId], references: [id])
  professorId        String
  schedule           Schedule[]
  additionalProfessors SubjectGroupProfessor[]

  @@index([subjectId])
  @@index([professorId])
}

model Invigilator {
  id          String     @id @default(cuid()) @map("InvigilatorID")
  name        String
  positionType        String     @default("INTERNAL") // INTERNAL(Can be GenED, Education and employee of bla bla bla department or faculty), MANAGER(HEAD OF DEPARTMENT), PROFESSOR, HEAD_PROFESSOR(HEAD OF FACULTY)
  professorId String?    // Optional link to professor if internal
  professor   Professor? @relation(fields: [professorId], references: [id])
  schedules   Schedule[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userId      String?    @unique // Link to User
  user        User?      @relation(fields: [userId], references: [id])

  quota       Int        @default(4)
  assignedQuota Int      @default(0)
}

model Professor {
  id                  String                @id @default(cuid()) @map("ProfessorID")
  name                String                @unique
  department          Department            @relation(fields: [departmentId], references: [id])
  departmentId        String
  subjectGroups       SubjectGroup[]
  invigilator         Invigilator[]
  subjectGroupProfessors SubjectGroupProfessor[]
  messages            Message[]
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  userId              String?               @unique
  user                User?                 @relation(fields: [userId], references: [id])

  @@index([departmentId])
}

model SubjectGroupProfessor {
  id             String      @id @default(cuid())
  subjectGroup   SubjectGroup @relation(fields: [subjectGroupId], references: [id])
  subjectGroupId String
  professor      Professor    @relation(fields: [professorId], references: [id])
  professorId    String

  @@unique([subjectGroupId, professorId])
  @@index([subjectGroupId])
  @@index([professorId])
}

model Schedule {
  id                  String      @id @default(cuid()) @map("ScheduleID")
  date                DateTime    @db.Date  // Use @db.Date for date only
  scheduleDateOption  String      // e.g. "MORNING", "AFTERNOON", "EVENING"
  startTime           DateTime    @db.Time  // Use @db.Time for time only
  endTime             DateTime    @db.Time  // Use @db.Time for time only
  room                Room        @relation(fields: [roomId], references: [id])
  roomId              String
  subjectGroup        SubjectGroup @relation(fields: [subjectGroupId], references: [id])
  subjectGroupId      String
  invigilator         Invigilator @relation(fields: [invigilatorId], references: [id])
  invigilatorId       String
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  
  @@index([roomId])
  @@index([subjectGroupId])
  @@index([invigilatorId])
}

model Department {
  id         String      @id @default(cuid()) @map("DepartmentID")
  name       String
  subjects   Subject[]
  professors Professor[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Message {
  id          String    @id @default(cuid()) @map("MessageID")
  professor   Professor @relation(fields: [professorId], references: [id])
  professorId String
  content     String
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Room {
  id         String     @id @default(cuid()) @map("RoomID")
  building   String
  roomNumber String
  schedules  Schedule[] // Add relation to Schedule
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@unique([building, roomNumber]) // Add unique constraint for building + roomNumber combination
}


