datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid()) @map("AccountID")
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String? @map("oauth_token_secret") @db.Text
  oauth_token        String? @map("oauth_token") @db.Text

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts") // Table name in database is lowercase
}

model Session {
  id           String   @id @default(cuid()) @map("SessionID")
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions") // Table name in database is lowercase
}

model User {
  id            String       @id @default(cuid()) @map("UserID")
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          String       @default("user")
  professor     Professor? // Link to Professor if user is a professor
  invigilator   Invigilator? // Link to Invigilator if user is an invigilator
  activities    Activity[]
  schedules     Schedule[] // Many-to-many relation with schedules
  appeals       Appeal[] // Add this line for Appeal relation

  @@map("users") // Table name in database is lowercase
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Subject {
  id            String         @id @default(cuid()) @map("SubjectID")
  code          String         @unique // Subject code
  name          String
  subjectGroups SubjectGroup[]
  department    Department     @relation(fields: [departmentId], references: [id])
  departmentId  String
  isGenEd       Boolean       @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model SubjectGroup {
  id                   String                  @id @default(cuid())
  groupNumber          String
  year                 Int
  studentCount         Int
  subject              Subject                 @relation(fields: [subjectId], references: [id])
  subjectId            String
  professor            Professor               @relation(fields: [professorId], references: [id])
  professorId          String
  schedules            Schedule[]
  additionalProfessors SubjectGroupProfessor[]

  @@unique([subjectId, groupNumber, year])
  @@index([subjectId])
  @@index([professorId])
}

model Invigilator {
  id            String     @id @default(cuid()) @map("InvigilatorID")
  name          String
  type          String     @default("บุคลากร")
  departmentId  String // Required now since we need department assignment
  department    Department @relation(fields: [departmentId], references: [id])
  professorId   String?    @unique // Optional since not all invigilators are professors
  professor     Professor? @relation(fields: [professorId], references: [id])
  schedules     Schedule[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  userId        String?    @unique
  user          User?      @relation(fields: [userId], references: [id])
  quota         Int        @default(4) // Maximum assignments allowed
  assignedQuota Int        @default(0) // Current number of assignments

  @@index([departmentId])
  @@index([professorId])
}

model Professor {
  id                     String                  @id @default(cuid()) @map("ProfessorID")
  name                   String                  @unique
  department             Department              @relation(fields: [departmentId], references: [id])
  departmentId           String
  subjectGroups          SubjectGroup[]
  invigilator            Invigilator[]
  subjectGroupProfessors SubjectGroupProfessor[]
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  userId                 String?                 @unique
  user                   User?                   @relation(fields: [userId], references: [id])

  @@index([departmentId])
}

model SubjectGroupProfessor {
  id             String       @id @default(cuid())
  subjectGroup   SubjectGroup @relation(fields: [subjectGroupId], references: [id])
  subjectGroupId String
  professor      Professor    @relation(fields: [professorId], references: [id])
  professorId    String

  @@unique([subjectGroupId, professorId])
}

model Schedule {
  id                  String       @id @default(cuid()) @map("ScheduleID")
  date                DateTime
  startTime           DateTime
  endTime             DateTime
  notes               String?
  scheduleDateOption  String // 'MORNING' | 'AFTERNOON'
  examType            String // 'MIDTERM' | 'FINAL'
  academicYear        Int
  semester            Int
  invigilatorPosition Int?
  room                Room         @relation(fields: [roomId], references: [id])
  roomId              String
  subjectGroup        SubjectGroup @relation(fields: [subjectGroupId], references: [id])
  subjectGroupId      String
  invigilator         Invigilator? @relation(fields: [invigilatorId], references: [id])
  invigilatorId       String?
  users               User[] // Add this for many-to-many relation with User
  appeals             Appeal[] // Add this for one-to-many relation with Appeal
  priority            Boolean    @default(false)  // สำหรับมาร์คว่าเป็นวิชาของภาควิชานั้นๆ
  isGenEd             Boolean    @default(false)  // สำหรับมาร์คว่าเป็นวิชา GenEd
  quotaFilled         Boolean    @default(false)  // สถานะว่าโควต้าเต็มหรือยัง
  departmentQuota     Int        @default(0)      // จำนวนโควต้าที่จัดสรรให้แต่ละภาค
  staffPreferred      Boolean    @default(false)  // เพิ่มฟิลด์ใหม่
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt

  @@unique([date, roomId, startTime, endTime, invigilatorPosition])
  @@index([roomId])
  @@index([subjectGroupId])
  @@index([invigilatorId])
}

model Department {
  id           String        @id @default(cuid()) @map("DepartmentID")
  name         String        @unique
  code         String        @unique
  metadata     Json?
  subjects     Subject[]
  professors   Professor[]
  invigilators Invigilator[]
  quota        Int           @default(0)      // โควต้ารวมของภาควิชา
  usedQuota    Int           @default(0)      // โควต้าที่ใช้ไปแล้ว
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Appeal {
  id              String     @id @default(cuid()) @map("AppealID")
  user            User       @relation(fields: [userId], references: [id])
  userId          String
  schedule        Schedule   @relation(fields: [scheduleId], references: [id])
  scheduleId      String
  type            String // 'CHANGE_DATE' | 'FIND_REPLACEMENT'
  reason          String
  preferredDates  DateTime[]
  status          String     @default("PENDING") // 'PENDING' | 'APPROVED' | 'REJECTED'
  additionalNotes String?
  adminResponse   String?
  read            Boolean    @default(false)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  @@index([userId])
  @@index([scheduleId])
}

model Room {
  id         String     @id @default(cuid()) @map("RoomID")
  building   String
  roomNumber String
  schedules  Schedule[] // Add relation to Schedule
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @default(now())

  @@unique([building, roomNumber]) // Add unique constraint for building + roomNumber combination
}

model Activity {
  id          String   @id @default(cuid()) @map("ActivityID")
  type        String
  description String
  createdAt   DateTime @default(now())
  userId      String?
  user        User?    @relation(fields: [userId], references: [id])

  @@index([createdAt])
}
